+ Echo
	+ Install cucumber.
	+ Generate an empty cucumber story and make it run.
	+ Cucumber doesn't work. Make a simplest possible rspec test pass through selenium.
	+ Write a rspec story to check echo functionality and make it fail.
	+ Make the echo work on Heroku and EC2.
+ Story 1
	+ Create a remote cucumber test and see if it works at all.
	+ Make cucumber start/stop thin server.
	+ Write scenario for story 1 using low-level Capybara.
	+ Make it fail.
	+ Make it pass.
		+ add_tile_action_spec
			FAIL - Create rspec compatible with cramp based on cramp/test_case.
			+ Create support for running cramp-based asyncronous server specs.
			+ Make test 'get' work.
			+ Only POST should be supported.
			+ Should add tile to the game.
		+ game_events_spec
			+ Should respond with empty story for a new game.
			+ Should respond with a story after adding tiles once.
+ Story 2 - one player starts game, adds four tiles
+ Story 3 - after playing a game, a player can start a new game.
+ Tidy up a bit.	
	+ Go through T O D O and F I X M E in code.
	+ Create RESTful routes and use them in JavaScript.
		+ PUT game/ --> add_tile_action
		+ GET game/ --> game_events_action
		+ Use in JS.
	+ Rename HomePageAction to HomePageAction (also the file).
	+ Rename index.haml to index.htm.haml.
	+ Make everything work.
+ Story 4 - Two players can simultaneously play two separate games.
	+ Figure out how to do it.
	+ Figure out how to write a cucumber test with two browser windows.
	+ Write cucumber test and see it fail.
	  	 Here's how: add a button on the home page to start a game. Upon clicking the button, the browser calls /game
         with POST method and receives the ID of the new game. It then redirects to /game.htm?id=39423948 with GET which
         uses /game?id=39423948 via GET to receive events using EventSource.
		+ Write the scenario.
		+ Update the cucumber steps to use the button and wait for #board when creating new game.
	+ Make the old cucumber tests pass with the button.
		+ Add button to homepage with redirect to /game.htm
		+ GET game.htm --> game_page_action
			+ Render the haml moved from index.html.haml		
		+ See cucumber pass except for @story4.
		+ Commit.
	- Let's now make the story #4 cucumber test pass.
		+ When the user clicks button@new-game, it POSTs game/ to obtain the new game id
		+ and redirects to game.htm?id=<new game id>.
		+ POST game/ routes to NewGameAction.
		+ The action accepts only POST requests
		+ and when is invoked it starts a new game
		+ and renders its unique id.
		+ To make old cucumber tests pass, Application.start_new_game simply creates a new Game object and 
		  returns a dummy id.
		+ All rspec specs pass. All cucumber tests pass except for @story4.
		+ COMMIT.
		+ Browser should pull events for the specific game so /game.htm uses the id from its url when creating
          its EventSource.
	 	+ Write spec for GameEventsAction: it should render tiles for multiple games based on their id.
		+ When user adds a tile it should be POSTed using the current game id
		+ and added to the correct game.
		+ Add application_spec 
			+ when asked for a new game it should query the game class (Game.create) and return Game::id.
			+ and also find_game method should be a simple mapping to Game.find(id).
			+ The test method clear! is no longer necessary.
		+ Game.create
			- should return a new Game object.
			- should create Games with different ids (note: use guids).
		+ Game.find
			- should find Game objects based on id.
		+ I extracted the JavaScript Horus API into a separate file (horus_api.js).
		+ All cucumber and rspec tests pass.
		+ COMMIT.
+ Story 5 - Players can join games in progress.
	+ The main page now lists all current games as links 
	+ so I changed the title of new-game#button to "Start new game" to make it more consistent.
	+ All rspec & cucumber tests pass.
	+ COMMIT.
+ Push to ec2 and make it run there.
+ Package my rspec support for cramp.
	+ Write test-first:
		+ respond_with
			+ should support the GET method.
			+ should support the POST method.
			+ should support the PUT method.
			+ should support the DELETE method.
			+ should timeout when no response.
			+ should handle sync errors e.g. 404
			+ support passing headers to get/post etc.
			+ passing {} as the second arg when there are no options should be unnecessary
				+ rename to as respond_with
				+ rewrite so for body it's used like this respond_with :body => "EUEUEU"
					+ exact match
					+ regex match
				+ add support for code: respond_with :code => 200
					+ number
					+ number as string
					+ symbol => :ok, :error
					+ regex
				+ add support for header: respond with :header => { "Last-Event-ID" => "234234", ... }
					+ exact match
					+ regex match
		+ rewrite get/post so there are two usages:
			+ get "/" do { }
			+ get("/").should respond_with :code => :ok
		+ better failure message
			+ for exact match
			+ for regex match (see if the message looks ok)
	+ Write specs for get/post/put/delete w/o the matcher.
	+ Make them pass.
	+ Refactor the code.
	+ Make them pass.
	+ Rewrite specs in Horus using the new matcher.
	+ Make specs in Horus pass.
	+ Write short documentation.
	+ Send the draft to lifo.
	+ Publish gem + source.
+ Story 6 - When starting a game, the player enters a nickname visible to other players.
	+ UI for entering the nickname.
	+ Set game owner.
	+ Specs pass.
	+ Cucumber pass except for story #6.
	+ COMMIT
	+ Display the owner.
		+ game_events should respond with JSON - {"tile":"Lorem"}
		+ after player establishes the connection, respond with {"owner":"Joe"}
			+ write spec
			+ make it pass
		+ show the owner on #players
	+ COMMIT	
+ Story 7 - When joining a game, the player enters a nickname visible to other players.
	+ Change all routers to .../:game_id
	+ POST /tile/:game_id {:tile => "ABC"} to add a tile.
	+ I extracted common functionality for game actions into GameAction.
	+ PUT /game/:game_id {:join => "Joe"} to join a game.
		+ routes
		+ join game action - respond with {"status":"ok"}
		+ call Game::join(nickname)
		+ UI
			+ Use JQuery dialog for entering the nickname.
			+ PUT when user clicks "OK".
			+ PUT -- respond with {:status => :ok, :id => <game id>}
			+ Use this ID to redirect.
			+ Make it modal, non-resizable.
			+ Use the dialog for new games as well.
		+ Make previous acceptance tests pass.
		+ Make specs pass.
		+ COMMIT
	+ Game - when rendering, render events about joining.
		+ store @events and render them instead of @owner & @tiles.
		+ when player joins, create an event.
	+ GameEventsAction - when player joins, it renders an appropriate event.
	+ games.html - list players joining the game.
	+ COMMIT
+ Story #8 - anonymous users may watch game using the public game id.
	+ Cucumber scenario.
		+ Pass public game id to game.html to make it easier to test.
		+ POST /game should respond both with private and public game id.
		+ Use the id on index.html
	+ Make old stories pass.
		+ PUT /game should respond with a private id.
	+ POST /tile should only accept requests with a private id.
	+ When accessed via game.html with a public game id, it should hide the controls.
	+ "Watch" links on the main page.
	COMMIT
- Story #9 - the first turn is for the player who created the game.
	+ Add cucumber scenario.
	- Clean up Game
		+ Event-related code to GameEvents (incl. rendering).
		- Get rid of owner.
		- Player class.
		- can_interract? to GameInterraction.
	- Rspec for Game::add_tile
- Story - after the game creator's turn it's the other players turn.
- Story - players may not play outside their turns (3 players)
- Story - disable controls when it's not the player's turn.
- Story - clearly indicate which player's turn it is 
- Story - player watching a game may try to join it.

- Story - A player must type single words no blanks. (display errors somehow)
- Story - A player may skip his turn (pass). 
- Story - A player who skips 3 turns in a row is kicked out.
- Story - Turn is automatically passed after 1 minute.
- Story - When all players pass in a row, the game is over.
- Story - Nicknames displayed during a game are updated in real-time as players join/leave the game.
- Story - Player cannot easily join other player's game.  # Private/public game ids.

- Story - Player starting a new game can type up to 7 words to give the story a beginning.

- Story - Main page updates list of current games in real time.
- Story - Main game shows current games' progress.
- Story - Main game shows 5 current games per page.

- Story - A game can have a maximum of 2 players.
- Story - Click to add stops, exclamation marks, smileys etc. (does not finish the round).

- Story - Finished stories are listed.

- Story - Users can rank stories (both finished and being written).
- Story - Two lists of finished stories: recent-first and rank-based.
- Story - User can click a suggested word instead of typing (markov chains)

You may distribute, publicly display, publicly perform,
between the English and any other form
The Planet an amount equal to all
possess a valid serial number to install
use of the Software, provided you inform