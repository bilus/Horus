+ Echo
	+ Install cucumber.
	+ Generate an empty cucumber story and make it run.
	+ Cucumber doesn't work. Make a simplest possible rspec test pass through selenium.
	+ Write a rspec story to check echo functionality and make it fail.
	+ Make the echo work on Heroku and EC2.
+ Story 1
	+ Create a remote cucumber test and see if it works at all.
	+ Make cucumber start/stop thin server.
	+ Write scenario for story 1 using low-level Capybara.
	+ Make it fail.
	+ Make it pass.
		+ add_tile_action_spec
			FAIL - Create rspec compatible with cramp based on cramp/test_case.
			+ Create support for running cramp-based asyncronous server specs.
			+ Make test 'get' work.
			+ Only POST should be supported.
			+ Should add tile to the game.
		+ game_events_spec
			+ Should respond with empty story for a new game.
			+ Should respond with a story after adding tiles once.
+ Story 2 - one player starts game, adds four tiles
+ Story 3 - after playing a game, a player can start a new game.
+ Tidy up a bit.	
	+ Go through T O D O and F I X M E in code.
	+ Create RESTful routes and use them in JavaScript.
		+ PUT game/ --> add_tile_action
		+ GET game/ --> game_events_action
		+ Use in JS.
	+ Rename HomePageAction to HomePageAction (also the file).
	+ Rename index.haml to index.htm.haml.
	+ Make everything work.
+ Story 4 - Two players can simultaneously play two separate games.
	+ Figure out how to do it.
	+ Figure out how to write a cucumber test with two browser windows.
	+ Write cucumber test and see it fail.
	  	 Here's how: add a button on the home page to start a game. Upon clicking the button, the browser calls /game
         with POST method and receives the ID of the new game. It then redirects to /game.htm?id=39423948 with GET which
         uses /game?id=39423948 via GET to receive events using EventSource.
		+ Write the scenario.
		+ Update the cucumber steps to use the button and wait for #board when creating new game.
	+ Make the old cucumber tests pass with the button.
		+ Add button to homepage with redirect to /game.htm
		+ GET game.htm --> game_page_action
			+ Render the haml moved from index.html.haml		
		+ See cucumber pass except for @story4.
		+ Commit.
	- Let's now make the story #4 cucumber test pass.
		+ When the user clicks button@new-game, it POSTs game/ to obtain the new game id
		+ and redirects to game.htm?id=<new game id>.
		+ POST game/ routes to NewGameAction.
		+ The action accepts only POST requests
		+ and when is invoked it starts a new game
		+ and renders its unique id.
		+ To make old cucumber tests pass, Application.start_new_game simply creates a new Game object and 
		  returns a dummy id.
		+ All rspec specs pass. All cucumber tests pass except for @story4.
		+ COMMIT.
		+ Browser should pull events for the specific game so /game.htm uses the id from its url when creating
          its EventSource.
	 	+ Write spec for GameEventsAction: it should render tiles for multiple games based on their id.
		+ When user adds a tile it should be POSTed using the current game id
		+ and added to the correct game.
		+ Add application_spec 
			+ when asked for a new game it should query the game class (Game.create) and return Game::id.
			+ and also find_game method should be a simple mapping to Game.find(id).
			+ The test method clear! is no longer necessary.
		+ Game.create
			- should return a new Game object.
			- should create Games with different ids (note: use guids).
		+ Game.find
			- should find Game objects based on id.
		+ I extracted the JavaScript Horus API into a separate file (horus_api.js).
		+ All cucumber and rspec tests pass.
		+ COMMIT.
+ Story 5 - Players can join games in progress.
	+ The main page now lists all current games as links 
	+ so I changed the title of new-game#button to "Start new game" to make it more consistent.
	+ All rspec & cucumber tests pass.
	+ COMMIT.
- Push to heroku.
- Package my rspec support for cramp.
	- Write specs.
	- Make them pass.
	- Refactor the code.
	- Make them pass.
	- Make specs in Horus pass.
	- Send the draft to lifo.
- Create rudimentary graphics and animations.

- Story - Players may only add tiles during their rounds.
- Story - A player may only type single words.

- Story - Player starting a new game can type up to 7 words to give the story a beginning.

- Story - A game can have a maximum of 2 players.

- Story - A player may skip his turn (pass). 

- Story - When both players pass in a row, the game is over.

- Story - Finished stories are listed.

- Story - Users can rank stories (both finished and being written).

- Story - Two lists of finished stories: recent-first and rank-based.

- Story - User cannot join 

- Story - User can click a suggested word instead of typing (markov chains)

You may distribute, publicly display, publicly perform,
between the English and any other form
The Planet an amount equal to all
possess a valid serial number to install
use of the Software, provided you inform